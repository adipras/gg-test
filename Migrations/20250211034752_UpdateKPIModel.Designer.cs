// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gg_test.Data;

#nullable disable

namespace gg_test.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250211034752_UpdateKPIModel")]
    partial class UpdateKPIModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("gg_test.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Company A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Company B"
                        });
                });

            modelBuilder.Entity("gg_test.Models.EmailHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("SentAt"));

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EmailHistories");
                });

            modelBuilder.Entity("gg_test.Models.KPI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyRevenue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("NetProfit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ProfitMargin")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("KPIs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            MonthlyRevenue = 100000m,
                            NetProfit = 20000m,
                            ProfitMargin = 20m
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            MonthlyRevenue = 120000m,
                            NetProfit = 25000m,
                            ProfitMargin = 21m
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 2,
                            MonthlyRevenue = 150000m,
                            NetProfit = 30000m,
                            ProfitMargin = 20m
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 2,
                            MonthlyRevenue = 160000m,
                            NetProfit = 32000m,
                            ProfitMargin = 20m
                        });
                });

            modelBuilder.Entity("gg_test.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department = "IT",
                            Email = "admin@example.com",
                            Name = "Admin User",
                            Password = "$2a$11$45lIcvCeDBbZElA79B3kYe1hyHimb5.AgAUvzmIkYTfqpuCx6ocnm",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            Department = "Sales",
                            Email = "manager@example.com",
                            Name = "Manager User",
                            Password = "$2a$11$x1vtGo3gFS4Wm5T/fRuQnexwywVd.ogk0RU.wUB2rdBB4/EOMUxN6",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            Department = "Sales",
                            Email = "emp1@example.com",
                            Name = "Employee1",
                            Password = "$2a$11$Ely1uPtNsH7bzi/q6LRWPO53LhcDOr7C3aUtHyToofV5pRjB71Kj.",
                            Role = 2
                        },
                        new
                        {
                            Id = 4,
                            Department = "Marketing",
                            Email = "emp2@example.com",
                            Name = "Employee2",
                            Password = "$2a$11$khFETW3SimDiMibnsBGI5O8g9RHJZ1UTiBzWCzwJkcwzJ9sykOhxS",
                            Role = 2
                        });
                });

            modelBuilder.Entity("gg_test.Models.KPI", b =>
                {
                    b.HasOne("gg_test.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
